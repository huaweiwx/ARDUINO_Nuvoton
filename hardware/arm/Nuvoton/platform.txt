
# Nuvoton MCU and platform.
# ------------------------------------------
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5-3rd-party-Hardware-specification

name=Nuvoton
version=1.8.5

# Nuvoton compile variables
# ------------------------------------------

compiler.warning_flags=-w 
compiler.warning_flags.none=-w {build.log_level}
compiler.warning_flags.default={build.log_level}
compiler.warning_flags.more=-Wall {build.log_level}
compiler.warning_flags.all=-Wall -Wextra {build.log_level}

# Default "compiler.path" is correct, change only if you want to override the initial value
#compiler.path={runtime.hardware.path}/../tools/arm-none-eabi/5.4.1-2016q2/bin/
compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/

compiler.S.cmd=arm-none-eabi-gcc
compiler.c.cmd=arm-none-eabi-gcc
compiler.cpp.cmd=arm-none-eabi-g++
compiler.ar.cmd=arm-none-eabi-ar
compiler.c.elf.cmd=arm-none-eabi-gcc
compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.elf2hex.cmd=arm-none-eabi-objcopy
compiler.size.cmd=arm-none-eabi-size

compiler.S.flags=-c -g -x assembler-with-cpp
compiler.c.flags=-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -Dprintf=iprintf -MMD
compiler.cpp.flags=-c -g -Os {compiler.warning_flags} -std=gnu++14 -fpermissive -ffunction-sections -fdata-sections -nostdlib -fno-threadsafe-statics --param max-inline-insns-single=500 -fno-rtti -Dprintf=iprintf -MMD
compiler.c.elf.flags= -Os -Wl,--gc-sections
compiler.ar.flags=rcs
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2hex.flags=-O binary
compiler.elf2hex.flags2=-O ihex
compiler.ldflags=

compiler.define=-DARDUINO=
compiler.combine.flags=-u _sbrk -u link -u _close -u _fstat -u _isatty -u _lseek -u _read -u _write -u _exit -u kill -u _getpid

# This can be overridden in boards.txt
build.extra_flags=
build.extra_flags_serial=
build.log_level=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=
compiler.S.extra_flags=
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=


compiler.lib.c.flags=-D{build.series} -D__NUVOTON__ -DRAM_LENGTH={upload.maximum_data_size} "-I{build.path}/sketch" "-I{build.system.path}/{build.series}" "-I{build.system.path}/CMSIS/Include" "-I{build.system.path}/{build.series}/Device/Nuvoton/{build.series}/Include" "-I{build.system.path}/{build.series}/StdDriver/inc" "-I{build.system.path}/{build.series}/Chips"

# USB Flags
# ------------------------------------------
build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'

# Default usb manufacturer will be replaced at compile time using
# numeric vendor ID if available or by board's specific value.
build.usb_manufacturer="Unknown"


# NUVOTON compile patterns
# ------------------------------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {build.extra_flags_serial} {compiler.lib.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {build.extra_flags_serial} {compiler.lib.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {build.extra_flags_serial} {compiler.lib.c.flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
# archive_file_path is needed for backwards compatibility with IDE 1.6.5 or older, IDE 1.6.6 or newer overrides this value
archive_file_path={build.path}/{archive_file}
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" -mcpu={build.mcu} -mthumb {compiler.c.elf.flags} "-T{build.system.path}/linker_scripts/{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" {compiler.c.elf.extra_flags} -o "{build.path}/{build.project_name}.elf" "-L{build.path}" -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--start-group {compiler.combine.flags} {object_files} "{build.path}/{archive_file}" -lstdc++ -lc  -Wl,--end-group -lm -lgcc --specs=nano.specs

## Create bin
recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags2} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Save files
recipe.output.tmp_file.bin={build.project_name}.bin
recipe.output.save_file.bin={build.project_name}.{build.variant}.bin
recipe.output.tmp_file.hex={build.project_name}.hex
recipe.output.save_file.hex={build.project_name}.{build.variant}.hex
recipe.output.tmp_file.elf={build.project_name}.elf
recipe.output.save_file.elf={build.project_name}.{build.variant}.elf
recipe.output.tmp_file.map={build.project_name}.map
recipe.output.save_file.map={build.project_name}.{build.variant}.map

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=^(?:\.text|\.data|\.rodata|\.text.align|\.ARM.exidx)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*


# Nuvotn MCU Uploader tools
# ------------------------------------------

# This can be overridden in boards.txt
#upload.console=Serial

tools.nulinkburn.cmd=nulinkburn
tools.nulinkburn.cmd.windows=nulinkburn.bat
tools.nulinkburn.path={runtime.ide.path}/hardware/tools/win

tools.nulinkburn.upload.params.verbose=
tools.nulinkburn.upload.params.quiet=
tools.nulinkburn.upload.pattern="{path}/NuLink/{cmd}" "{path}" "{build.path}/{build.project_name}.hex" "{upload.console}" "{build.path}/{build.project_name}.map" 


# jLINKOB/V21 upload
tools.jlinkob_upload.cmd=jlinkob_upload
tools.jlinkob_upload.cmd.windows=jlinkob_upload.bat
tools.jlinkob_upload.path.windows={runtime.ide.path}/hardware/tools/win
tools.jlinkob_upload.path.macosx={runtime.ide.path}/hardware/tools/macosx
tools.jlinkob_upload.path.linux={runtime.ide.path}/hardware/tools/linux

tools.jlinkob_upload.upload.params.verbose=-d
tools.jlinkob_upload.upload.params.quiet=
tools.jlinkob_upload.upload.pattern="{path}/{cmd}" {serial.port.file} {upload.altID} {upload.usbID} "{build.path}/{build.project_name}.hex" {upload.device} {build.uploadadr} {build.vect} 
